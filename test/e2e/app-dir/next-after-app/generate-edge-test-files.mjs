// this script mirrors all files under "app/nodejs/" into "app/edge/"
// reexporting from the original, and adding `export const runtime = "edge"`
// this is done so that we can easily test both runtimes
// without having to maintain two copies of each test file

import * as fs from 'node:fs'
import * as path from 'node:path'
import glob from 'glob'
import fse from 'fs-extra'

const scriptDir = import.meta.dirname
const appDir = `${scriptDir}/app`

// clear existing "edge" dir, we're generating everything fresh
if (fs.existsSync(`${appDir}/edge`)) {
  fs.rmSync(`${appDir}/edge`, { recursive: true })
}
fs.mkdirSync(`${appDir}/edge`)

fs.writeFileSync(
  `${appDir}/edge/EDGE_FILES_ARE_AUTO_GENERATED.md`,
  `See the [generate-edge-test-files](${path.relative(`${appDir}/edge/`, import.meta.filename)}) script for more.\n`
)

const segmentConfigNames = [
  'dynamic',
  'dynamicParams',
  'revalidate',
  'fetchCache',
  // 'runtime', // we explicitly set this one
  'preferredRegion',
  'maxDuration',
  'experimental_ppr',
]

for (const fileNode of glob.sync(`${appDir}/nodejs/**/*.js`, {
  realpath: true,
  nodir: true,
})) {
  // create an empty file with an analogous path, but under "edge" instead of "nodejs"
  const fileEdge = fileNode.replace(`${appDir}/nodejs/`, `${appDir}/edge/`)

  console.error(fileEdge)
  const fileEdgeDir = path.dirname(fileEdge)
  fse.mkdirpSync(fileEdgeDir)
  const originalSource = fs.readFileSync(fileNode, 'utf-8')
  fs.writeFileSync(
    fileEdge,
    [
      `// This file was generated by the 'generate-edge-test-files' script.`,
      `// Do not edit it manually.`,
      ``,

      // directives need to appear verbatim
      ...originalSource.split('\n').filter(
        (line) =>
          line.match(/^["']use client['"]/) ||
          line.match(/^\/\/ ["']use client['"]/) || // replaced in tests
          line.match(/^["']use server['"]/) ||
          line.match(/^\/\/ ["']use server['"]/) // replaced in tests
      ),

      // reexport everything from the original nodejs file
      `export * from '${path.relative(fileEdgeDir, fileNode)}'`,
      ...(originalSource.includes('export default')
        ? [`export { default } from '${path.relative(fileEdgeDir, fileNode)}'`]
        : []),

      // ...but make it use the edge runtime
      `export const runtime = 'edge'`,
      ``,
      ...originalSource.split('\n').filter((line) =>
        segmentConfigNames.some(
          (config) =>
            line.startsWith(`export const ${config} = `) ||
            line.startsWith(`// export const ${config} = `) // replaced in tests
        )
      ),
    ].join('\n')
  )
}
